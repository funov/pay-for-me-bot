using AutoMapper;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using ReceiptApiClient.Exceptions;
using ReceiptApiClient.ReceiptApiClient;
using SqliteProvider.Repositories.ProductRepository;
using SqliteProvider.Repositories.UserProductBindingRepository;
using SqliteProvider.Repositories.UserRepository;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramBotService.KeyboardMarkup;
using TelegramBotService.Models;

namespace TelegramBotService.TelegramBotService.MessageHandlers.ProductsSelectionStageMessageHandler;

public class ProductsSelectionStageMessageHandler : IProductsSelectionStageMessageHandler
{
    private static string HelpMessage
        => "‚ùì‚ùì‚ùì\n\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é. ü§ùü§ùü§ù\n\n" +
           "2) –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã. –≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏." +
           "3) –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–≤ —à—Ç—É–∫–∞—Ö –∏ —Ü–µ–Ω—É, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ " +
           "(–≥–¥–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω QR-–∫–æ–¥). –î–∞–ª–µ–µ –Ω–∞–∂–º–∏ –Ω–∞ ¬´üõí¬ª, —á—Ç–æ–±—ã –ø–æ–∑–∂–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å " +
           "–∑–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä. –¢—ã —É–≤–∏–¥–∏—à—å ¬´‚úÖ¬ª. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É. ü§ìü§ìü§ì\n\n" +
           "4) –ï—Å–ª–∏ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å, –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å " +
           "–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´<b>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Å—á—ë—Ç–∞</b>üí¥¬ª.\n\n" +
           "5) –î–∞–ª–µ–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø—Ä–æ—Å—è—Ç –≤–≤–µ—Å—Ç–∏ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∏ <b>—Å—Å—ã–ª–∫—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ</b> (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è " +
           "—Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ–±–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏. ü§ëü§ëü§ë\n\n–ü–æ—Ç–æ–º –±–æ—Ç —Ä–∞–∑–æ—à–ª–µ—Ç –≤—Å–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ üéâüéâüéâ";

    private readonly ILogger<ProductsSelectionStageMessageHandler> log;
    private readonly IReceiptApiClient receiptApiClient;
    private readonly IKeyboardMarkup keyboardMarkup;
    private readonly IMapper mapper;
    private readonly IUserRepository userRepository;
    private readonly IProductRepository productRepository;
    private readonly IUserProductBindingRepository userProductBindingRepository;

    public ProductsSelectionStageMessageHandler(
        ILogger<ProductsSelectionStageMessageHandler> log,
        IReceiptApiClient receiptApiClient,
        IKeyboardMarkup keyboardMarkup,
        IMapper mapper,
        IUserRepository userRepository,
        IProductRepository productRepository,
        IUserProductBindingRepository userProductBindingRepository)
    {
        this.log = log;
        this.receiptApiClient = receiptApiClient;
        this.keyboardMarkup = keyboardMarkup;
        this.mapper = mapper;
        this.userRepository = userRepository;
        this.productRepository = productRepository;
        this.userProductBindingRepository = userProductBindingRepository;
    }

    public async Task HandleTextAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        var userName = message.Chat.Username!;

        log.LogInformation("Received a '{messageText}' message in chat {chatId} from @{userName}",
            message.Text, chatId, userName);

        var user = userRepository.GetUser(chatId);
        var teamId = user.TeamId;

        switch (message.Text!)
        {
            // TODO –î–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
            // TODO –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

            case "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Å—á—ë—Ç–∞üí¥":
                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å —Å—á–µ—Ç?" +
                          "\n\n" +
                          "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–µ—Ç, –∫—Ç–æ –∫–æ–º—É —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –∏ —Å–∫–∏–Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã" +
                          "\n\n" +
                          "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É/–≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!",
                    replyMarkup: keyboardMarkup.GetReplyKeyboardMarkup(new[] { "–î–∞!", "–ù–µ—Çü´£" }),
                    cancellationToken: cancellationToken);
                return;
            case "/help":
                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: HelpMessage,
                    parseMode: ParseMode.Html,
                    cancellationToken: cancellationToken);
                return;
            case "–î–∞!":
                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –±–∞–Ω–∫ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å).",
                    replyMarkup: new ReplyKeyboardRemove(),
                    cancellationToken: cancellationToken);
                userRepository.ChangeUserStage(chatId, teamId, "end");
                return;
            case "–ù–µ—Çü´£":
                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ù–∞–∂–º–∏, –∫–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å —Å—á–µ—Ç!",
                    replyMarkup: keyboardMarkup.GetReplyKeyboardMarkup(new[] { "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Å—á—ë—Ç–∞üí¥" }),
                    cancellationToken: cancellationToken);
                return;
        }

        if (Product.TryParse(message.Text!, out var dbProduct))
        {
            var productGuid = Guid.NewGuid();

            log.LogInformation("@{userName} added product {productGuid} in chat {chatId}",
                userName, productGuid, chatId);

            var teamUserChatIds = userRepository
                .GetUserChatIdsByTeamId(teamId)
                .ToList();

            var receiptId = Guid.NewGuid();
            var productId = AddProduct(dbProduct, receiptId, chatId, teamId);

            var products = new List<Product> { dbProduct };
            var productIds = new List<Guid> { productId };

            await SendAddedProductsToTeammatesAsync(teamUserChatIds, userName, client, products, productIds,
                cancellationToken);
        }
        else
        {
            log.LogInformation("Can't parse text from @{userName} {text} to product in chat {chatId}",
                userName, message.Text, chatId);

            await client.SendTextMessageAsync(
                chatId: chatId,
                text: "–ï—Å–ª–∏ –≤–≤–æ–¥–∏—à—å –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º, –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ ü§®ü§®ü§®" +
                      "\n\n<b>–û—Ä–∞–Ω–∂–µ–≤—ã–µ –∞–ø–µ–ª—å—Å–∏–Ω—ã 2 200.22</b>\n\n" +
                      "(<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–±—â–∞—è —Ü–µ–Ω–∞</b>)",
                parseMode: ParseMode.Html,
                cancellationToken: cancellationToken
            );
        }
    }

    public async Task HandlePhotoAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        if (message.Photo == null)
            return;

        var chatId = message.Chat.Id;
        var userName = message.Chat.Username;

        var fileId = message.Photo.Last().FileId;
        var fileInfo = await client.GetFileAsync(fileId, cancellationToken: cancellationToken);

        if (fileInfo.FilePath == null)
            throw new ArgumentException("FilePath is null");

        var filePath = fileInfo.FilePath;

        log.LogInformation("Received a '{photoPath}' message from @{userName} in chat {chatId}",
            filePath, userName, chatId);

        var encryptedContent = Array.Empty<byte>();

        if (fileInfo.FileSize != null)
        {
            using var stream = new MemoryStream((int)fileInfo.FileSize.Value);
            await client.DownloadFileAsync(filePath, stream, cancellationToken);
            encryptedContent = stream.ToArray();
        }

        await HandleReceiptAsync(client, chatId, userName, encryptedContent, cancellationToken);
    }

    private async Task HandleReceiptAsync(ITelegramBotClient client, long chatId, string? userName,
        byte[] encryptedContent, CancellationToken cancellationToken)
    {
        string problemText;

        try
        {
            log.LogInformation("Send request to receipt api from @{userName} in {chatId}", userName, chatId);

            var receipt = await receiptApiClient.GetReceipt(encryptedContent);

            if (receipt.Products == null)
                return;

            var products = receipt.Products.Select(x => mapper.Map<Product>(x)).ToList();

            var user = userRepository.GetUser(chatId);
            var teamId = user.TeamId;
            var teamUserChatIds = userRepository
                .GetUserChatIdsByTeamId(teamId)
                .ToList();
            var receiptId = Guid.NewGuid();
            var productIds = AddProducts(products, receiptId, chatId, teamId);

            await SendAddedProductsToTeammatesAsync(teamUserChatIds, userName, client, products, productIds,
                cancellationToken);

            return;
        }
        catch (ReceiptNotFoundException)
        {
            problemText = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ–∫, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç —á–µ–∫–∞";
        }
        catch (JsonException)
        {
            problemText = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
        }

        log.LogInformation("Send a '{problemText}' message to @{userName} in chat {chatId}",
            problemText, userName, chatId);

        await client.SendTextMessageAsync(
            chatId: chatId,
            text: problemText,
            cancellationToken: cancellationToken);
    }

    private async Task SendProductsMessagesAsync(ITelegramBotClient client, long chatId, string? userName,
        IReadOnlyList<Product> products, IReadOnlyList<Guid> productIds, CancellationToken cancellationToken)
    {
        for (var i = 0; i < products.Count; i++)
        {
            var text = $"{products[i].Name}";
            var productId = productIds[i];

            var inlineKeyboardMarkup = keyboardMarkup.GetInlineKeyboardMarkup(
                productId,
                $"{products[i].TotalPrice} —Ä.",
                $"{products[i].Count} —à—Ç.",
                "üõí");

            log.LogInformation("Send product {productId} inline button to @{userName} in chat {chatId}",
                productId, userName, chatId);

            await client.SendTextMessageAsync(
                chatId,
                text,
                replyMarkup: inlineKeyboardMarkup,
                disableNotification: true,
                cancellationToken: cancellationToken);
        }
    }

    public async Task HandleCallbackQuery(ITelegramBotClient client, CallbackQuery callback,
        CancellationToken cancellationToken)
    {
        if (callback.Message != null && callback.Data != null && Guid.TryParse(callback.Data, out var productId))
        {
            if (callback.Message.ReplyMarkup == null)
                throw new InvalidOperationException();

            var inlineKeyboard = callback.Message.ReplyMarkup.InlineKeyboard.First().ToArray();

            var inlineKeyboardMarkup = keyboardMarkup.GetInlineKeyboardMarkup(
                productId,
                inlineKeyboard[0].Text,
                inlineKeyboard[1].Text,
                inlineKeyboard[2].Text == "üõí" ? "‚úÖ" : "üõí");

            var chatId = callback.From.Id;
            var userName = callback.From.Username;

            var user = userRepository.GetUser(chatId);
            var teamId = user.TeamId;

            var id = Guid.NewGuid();

            if (inlineKeyboard[2].Text == "üõí")
            {
                log.LogInformation("User @{userName} decided to pay for the product {ProductId} in chat {chatId}",
                    userName, productId, chatId);

                userProductBindingRepository.AddUserProductBinding(id, chatId, teamId, productId);
            }
            else
            {
                log.LogInformation("User @{userName} refused to pay for the product {ProductId} in chat {chatId}",
                    userName, productId, chatId);

                userProductBindingRepository.DeleteUserProductBinding(chatId, teamId, productId);
            }

            await client.EditMessageTextAsync(
                callback.Message.Chat.Id,
                callback.Message.MessageId,
                callback.Message.Text ?? throw new InvalidOperationException(),
                replyMarkup: inlineKeyboardMarkup,
                cancellationToken: cancellationToken);
        }
        else
            await client.AnswerCallbackQueryAsync(callback.Id, cancellationToken: cancellationToken);
    }

    private List<Guid> AddProducts(IEnumerable<Product> products, Guid receiptId, long chatId, Guid teamId)
    {
        var productsIds = new List<Guid>();
        var sqliteProviderProducts = new List<SqliteProvider.Models.Product>();

        foreach (var product in products)
        {
            var productId = Guid.NewGuid();

            var sqliteProviderProduct = new SqliteProvider.Models.Product
            {
                Id = productId,
                Name = product.Name,
                Count = product.Count,
                Price = product.Price,
                TotalPrice = product.TotalPrice,
                TeamId = teamId,
                ReceiptId = receiptId,
                BuyerChatId = chatId
            };

            productsIds.Add(productId);
            sqliteProviderProducts.Add(sqliteProviderProduct);
        }

        productRepository.AddProducts(sqliteProviderProducts);

        return productsIds;
    }

    private Guid AddProduct(Product product, Guid receiptId, long chatId, Guid teamId)
    {
        var productId = Guid.NewGuid();

        var sqliteProviderProduct = new SqliteProvider.Models.Product
        {
            Id = productId,
            Name = product.Name,
            Count = product.Count,
            Price = product.Price,
            TotalPrice = product.TotalPrice,
            TeamId = teamId,
            ReceiptId = receiptId,
            BuyerChatId = chatId
        };

        productRepository.AddProduct(sqliteProviderProduct);
        return productId;
    }

    private async Task SendProductOwnersUsernameAsync(ITelegramBotClient client, long chatId,
        CancellationToken cancellationToken, string buyerUserName)
    {
        var text = $"@{buyerUserName} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã!";
        await client.SendTextMessageAsync(
            chatId: chatId,
            text: text,
            cancellationToken: cancellationToken);
    }

    private async Task SendAddedProductsToTeammatesAsync(
        List<long> teamUserChatIds,
        string? userName,
        ITelegramBotClient client,
        IReadOnlyList<Product> products,
        IReadOnlyList<Guid> productIds,
        CancellationToken cancellationToken)
    {
        foreach (var teamUserChatId in teamUserChatIds)
        {
            var user = userRepository.GetUser(teamUserChatId);
            var teamUsername = user.Username;

            if (userName != null && teamUsername != userName)
            {
                await SendProductOwnersUsernameAsync(client, teamUserChatId, cancellationToken, userName);
            }

            await SendProductsMessagesAsync(client, teamUserChatId, teamUsername,
                products, productIds, cancellationToken);
        }
    }
}