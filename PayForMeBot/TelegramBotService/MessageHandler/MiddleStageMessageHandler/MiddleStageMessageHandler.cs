using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using PayForMeBot.DbDriver;
using PayForMeBot.ReceiptApiClient;
using PayForMeBot.ReceiptApiClient.Exceptions;
using PayForMeBot.ReceiptApiClient.Models;
using PayForMeBot.TelegramBotService.KeyboardMarkup;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace PayForMeBot.TelegramBotService.MessageHandler.MiddleStageMessageHandler;

public class MiddleStageMessageHandler : IMiddleStageMessageHandler
{
    private static string HelpMessage
        => "‚ùì‚ùì‚ùì\n\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é. ü§ùü§ùü§ù\n\n" +
           "2) –î–∞–ª–µ–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø—Ä–æ—Å—è—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—Å—ã–ª–∫—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è " +
           "—Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ–±–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏. ü§ëü§ëü§ë\n\n" +
           "3) –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ —Ü–µ–Ω—É, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ " +
           "(–≥–¥–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω QR-–∫–æ–¥). –î–∞–ª–µ–µ –Ω–∞–∂–º–∏ –Ω–∞ ¬´üõí¬ª, —á—Ç–æ–±—ã –ø–æ–∑–∂–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å " +
           "–∑–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç—ã —É–≤–∏–¥–∏—à—å ¬´‚úÖ¬ª, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É. ü§ìü§ìü§ì\n\n" +
           "4) –ï—Å–ª–∏ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å, –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å " +
           "–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª. –î–∞–ª—å—à–µ –≤—Å–µ–º –ø—Ä–∏–¥—É—Ç —Å—É–º–º—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤. üéâüéâüéâ";

    private readonly ILogger<ReceiptApiClient.ReceiptApiClient> log;
    private readonly IReceiptApiClient receiptApiClient;
    private readonly IKeyboardMarkup keyboardMarkup;
    private readonly IDbDriver dbDriver;

    public MiddleStageMessageHandler(ILogger<ReceiptApiClient.ReceiptApiClient> log, IReceiptApiClient receiptApiClient,
        IKeyboardMarkup keyboardMarkup, IDbDriver dbDriver)
    {
        this.log = log;
        this.receiptApiClient = receiptApiClient;
        this.keyboardMarkup = keyboardMarkup;
        this.dbDriver = dbDriver;
    }

    public async Task HandleTextAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;

        log.LogInformation("Received a '{messageText}' message in chat {chatId}", message.Text, chatId);
        
        switch (message.Text!)
        {
            // TODO –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥–æ–º—É
            // TODO –î–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
            // TODO —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
            
            // TODO –∫–æ–≥–¥–∞ —á–µ–ª –∑–∞—Ö–æ–¥–∏—Ç –≤ endStage, —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–æ—Ç–æ–≤–æ

            // case "–ì–æ—Ç–æ–≤–æ":
            //     await client.SendTextMessageAsync(
            //         chatId: chatId,
            //         text: "–£–≤–µ—Ä–µ–Ω?",
            //         cancellationToken: cancellationToken);
            //     return;
            
            case "/help":
                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: HelpMessage,
                    cancellationToken: cancellationToken);
                return;
        }
        
        if (Product.TryParse(message.Text!, out var dbProduct))
        {
            // db.AddProduct(...);
            log.LogInformation("User added {product} with cost {price} in chat {chatId}",
                dbProduct.Name, dbProduct.Price, chatId);
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: $"–ü—Ä–∏–Ω—è–ª, {dbProduct.Name} {dbProduct.Count} —à—Ç –∑–∞ {dbProduct.Price} —Ä. —à—Ç—É–∫–∞",
                cancellationToken: cancellationToken
            );
        }

        else
        {
            log.LogInformation("Cant parse text {text} too product", message.Text);
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: "–ï—Å–ª–∏ –≤–≤–æ–¥–∏—à—å –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º, —Ç–æ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—É: " +
                      "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) " +
                      "—Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏ –æ—Ç–¥–µ–ª–∏ —Ç–æ—á–∫–æ–π)" +
                      "–ù–∞–ø—Ä–∏–º–µ—Ä, –±—É–ª–æ—á–∫–∏ —Å –≤–∏—à–Ω–µ–π 5 300.50",
                cancellationToken: cancellationToken
            );
        }
    }

    public async Task HandlePhotoAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        if (message.Photo == null)
            return;

        var chatId = message.Chat.Id;
        var userName = message.Chat.Username;

        var fileId = message.Photo.Last().FileId;
        var fileInfo = await client.GetFileAsync(fileId, cancellationToken: cancellationToken);

        if (fileInfo.FilePath == null)
            throw new ArgumentException("FilePath is null");

        var filePath = fileInfo.FilePath;

        log.LogInformation("Received a '{photoPath}' message in chat {chatId}", filePath, chatId);

        var encryptedContent = Array.Empty<byte>();

        if (fileInfo.FileSize != null)
        {
            using var stream = new MemoryStream((int)fileInfo.FileSize.Value);
            await client.DownloadFileAsync(filePath, stream, cancellationToken);
            encryptedContent = stream.ToArray();
        }

        await HandleReceiptAsync(client, chatId, userName, encryptedContent, cancellationToken);
    }

    private async Task HandleReceiptAsync(ITelegramBotClient client, long chatId, string? userName,
        byte[] encryptedContent, CancellationToken cancellationToken)
    {
        var problemText = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞";

        try
        {
            log.LogInformation("Send request to receipt api in {chatId}", chatId);

            var receipt = await receiptApiClient.GetReceipt(encryptedContent);
            var products = receipt.Products;

            if (products != null)
            {
                await SendProductsMessagesAsync(client, chatId, userName, products, cancellationToken);
                return;
            }
        }
        catch (ReceiptNotFoundException)
        {
            problemText = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç —á–µ–∫–∞";
        }
        catch (JsonException)
        {
            problemText = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
        }

        log.LogInformation("Received a '{problemText}' message in chat {chatId}", problemText, chatId);

        await client.SendTextMessageAsync(
            chatId: chatId,
            text: problemText,
            cancellationToken: cancellationToken);
    }

    private async Task SendProductsMessagesAsync(ITelegramBotClient client, long chatId, string? userName,
        IEnumerable<Product> products, CancellationToken cancellationToken)
    {
        var receiptGuid = Guid.NewGuid();

        foreach (var product in products)
        {
            var text = $"{product.Name}";
            var guid = Guid.NewGuid();

            var inlineKeyboardMarkup = keyboardMarkup.GetInlineKeyboardMarkup(
                guid,
                $"{product.TotalPrice} —Ä.",
                $"{product.Count} —à—Ç.",
                "üõí");

            // TODO fix it
            // dbDriver.AddProduct(guid, product, receiptGuid, userName, message.Chat.Id);

            log.LogInformation("Send product {ProductId} inline button to chat {ChatId}", guid, chatId);

            await client.SendTextMessageAsync(
                chatId,
                text,
                replyMarkup: inlineKeyboardMarkup,
                disableNotification: true,
                cancellationToken: cancellationToken);
        }
    }

    public async Task HandleCallbackQuery(ITelegramBotClient client, CallbackQuery callback,
        CancellationToken cancellationToken)
    {
        if (callback.Message != null && callback.Data != null && Guid.TryParse(callback.Data, out var guid))
        {
            if (callback.Message.ReplyMarkup == null)
                throw new InvalidOperationException();

            var inlineKeyboard = callback.Message.ReplyMarkup.InlineKeyboard.First().ToArray();

            var inlineKeyboardMarkup = keyboardMarkup.GetInlineKeyboardMarkup(
                guid,
                inlineKeyboard[0].Text,
                inlineKeyboard[1].Text,
                inlineKeyboard[2].Text == "üõí" ? "‚úÖ" : "üõí");

            if (inlineKeyboard[2].Text == "üõí")
            {
                log.LogInformation("User {UserId} decided to pay for the product {ProductId}", callback.From, guid);

                // TODO fix it
                // var teamId = dbDriver.GetTeamIdByUserTelegramId(callback.From.Username!);
                // dbDriver.AddUserProductBinding(callback.From.Username, teamId, guid);
            }
            else
            {
                log.LogInformation("User {UserId} refused to pay for the product {ProductId}", callback.From, guid);

                // TODO fix it
                // var teamId = dbDriver.GetTeamIdByUserTelegramId(callback.From.Username!);
                // dbDriver.DeleteUserProductBinding(callback.From.Username, teamId, guid);
            }

            await client.EditMessageTextAsync(
                callback.Message.Chat.Id,
                callback.Message.MessageId,
                callback.Message.Text ?? throw new InvalidOperationException(),
                replyMarkup: inlineKeyboardMarkup,
                cancellationToken: cancellationToken);
        }
        else
            await client.AnswerCallbackQueryAsync(callback.Id, cancellationToken: cancellationToken);
    }

    // private static Product ParseTextToProduct(string text)
    // {
    //     var productName = text.Split(" ").Take(text.Length - 1).ToString();
    //     if (double.TryParse(text.Split(" ").Last(), out var price))
    //         return new Product
    //         {
    //             Count = 1,
    //             Name = productName,
    //             Price = price,
    //             TotalPrice = price
    //         };
    //
    //     throw new ArgumentException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ / –Ω–∞—Ä—É—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏");
    // }

    public static class ProductExtension
    {
        
    } 
}