using Telegram.Bot;
using Telegram.Bot.Types;
using System.Text.Json;
using Microsoft.Extensions.Logging;
using PayForMeBot.ReceiptApiClient;
using PayForMeBot.ReceiptApiClient.Exceptions;
using PayForMeBot.ReceiptApiClient.Models;
using PayForMeBot.DbDriver;
using PayForMeBot.TelegramBotService.KeyboardMarkup;
using Telegram.Bot.Types.ReplyMarkups;

namespace PayForMeBot.TelegramBotService.MessageHandler;

public class MessageHandler : IMessageHandler
{
    private static HashSet<string> openTeamFlags = new() { "/start", "start", "–ù–∞—á–∞—Ç—å" };
    private static string[] teamSelectionLabels = { "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ" };

    private static HashSet<string> closeTeamFlags = new() { "/end", "end", "–ó–∞–≤–µ—Ä—à–∏—Ç—å" };
    private static string[] closeTeamLabels = { "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã" };

    private static HashSet<string> helpFlags = new() { "/help", "help", "–ü–æ–º–æ—â—å" };

    private readonly ILogger<ReceiptApiClient.ReceiptApiClient> log;
    private readonly IReceiptApiClient receiptApiClient;
    private readonly IKeyboardMarkup keyboardMarkup;
    private readonly IDbDriver dbDriver;

    private static string HelpMessage
        => "‚ùì‚ùì‚ùì\n\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é. ü§ùü§ùü§ù\n\n" +
           "2) –î–∞–ª–µ–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø—Ä–æ—Å—è—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—Å—ã–ª–∫—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è " +
           "—Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ–±–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏. ü§ëü§ëü§ë\n\n" +
           "3) –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ —Ü–µ–Ω—É, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ " +
           "(–≥–¥–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω QR-–∫–æ–¥). –î–∞–ª–µ–µ –Ω–∞–∂–º–∏ –Ω–∞ ¬´üõí¬ª, —á—Ç–æ–±—ã –ø–æ–∑–∂–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å " +
           "–∑–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç—ã —É–≤–∏–¥–∏—à—å ¬´‚úÖ¬ª, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É. ü§ìü§ìü§ì\n\n" +
           "4) –ï—Å–ª–∏ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å, –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å " +
           "–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª. –î–∞–ª—å—à–µ –≤—Å–µ–º –ø—Ä–∏–¥—É—Ç —Å—É–º–º—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤. üéâüéâüéâ";

    public MessageHandler(ILogger<ReceiptApiClient.ReceiptApiClient> log, IReceiptApiClient receiptApiClient,
        IKeyboardMarkup keyboardMarkup, IDbDriver dbDriver)
    {
        this.log = log;
        this.receiptApiClient = receiptApiClient;
        this.keyboardMarkup = keyboardMarkup;
        this.dbDriver = dbDriver;
    }

    private static Product ParseTextToProduct(string text)
    {
        var productName = text.Split(" ").Take(text.Length - 1).ToString();
        if (double.TryParse(text.Split(" ").Last(), out var price))
            return new Product
            {
                Count = 1,
                Name = productName,
                Price = price,
                TotalPrice = price
            };

        throw new ArgumentException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ / –Ω–∞—Ä—É—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏");
    }

    public async Task HandleTextAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;

        log.LogInformation("Received a '{messageText}' message in chat {chatId}", message.Text, chatId);

        if (openTeamFlags.Contains(message.Text!))
        {
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: "–°–æ–∑–¥–∞–π –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!",
                replyMarkup: keyboardMarkup.GetReplyKeyboardMarkup(teamSelectionLabels),
                cancellationToken: cancellationToken);
            return;
        }

        if (closeTeamFlags.Contains(message.Text!))
        {
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: "Test closing team / C–∫–∏–Ω—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                replyMarkup: keyboardMarkup.GetReplyKeyboardMarkup(closeTeamLabels),
                cancellationToken: cancellationToken);
            return;
        }


        if (helpFlags.Contains(message.Text!))
        {
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: HelpMessage,
                cancellationToken: cancellationToken);
        }

        switch (message.Text!)
        {
            // TODO –ë—Ä–∞—Ç—å –∏—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞ (teamSelectionLabels)

            // TODO –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥–æ–º—É

            // TODO –î–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã

            // TODO —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

            case "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É":
                // TODO fix it
                // dbDriver.AddUser(message.Chat.Username!, chatId);

                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–°–æ–∑–¥–∞–Ω–∞",
                    replyMarkup: new ReplyKeyboardRemove(),
                    cancellationToken: cancellationToken
                );

                break;
            case "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ":
                // TODO fix it
                // dbDriver.AddUser(message.Chat.Username!, chatId);

                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å!",
                    replyMarkup: new ReplyKeyboardRemove(),
                    cancellationToken: cancellationToken
                );
                break;

            case "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã":
                // dbDriver.AddUser(message.Chat.Username!, chatId);

                await client.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–°–∫–∏–Ω—å –º–Ω–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                    replyMarkup: new ReplyKeyboardRemove(),
                    cancellationToken: cancellationToken
                );
                break;
        }

        // TODO –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

        if (!true)
        {
            await client.SendTextMessageAsync(
                chatId: chatId,
                text: "–î–µ—Ä–∂–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Ç–µ—Ö, –∫–æ–º—É —Ç—ã –¥–æ–ª–∂–µ–Ω",
                cancellationToken: cancellationToken
            );
        }
    }

    public Task HandlePhotoAsync(ITelegramBotClient client, Message message, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }

    public Task HandleCallbackQuery(ITelegramBotClient client, CallbackQuery callback,
        CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }
}